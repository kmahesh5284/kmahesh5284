/*
 * Copyright (c) 2020 The Chromium OS Authors
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/dts-v1/;

#include <cros/nuvoton/npcx7.dtsi>
#include <dt-bindings/adc/adc.h>
#include <dt-bindings/charger/intersil_isl9241.h>
#include <dt-bindings/gpio_defines.h>
#include <nuvoton/npcx7m7fc.dtsi>
#include <cros/thermistor/thermistor.dtsi>

/ {
	model = "Google Volteer EC";

	aliases {
		i2c-0 = &i2c0_0;
		i2c-1 = &i2c1_0;
		i2c-2 = &i2c2_0;
		i2c-3 = &i2c3_0;
		i2c-5 = &i2c5_0;
		i2c-7 = &i2c7_0;
	};

	chosen {
		zephyr,sram = &sram0;
		zephyr,console = &uart1;
		zephyr,shell-uart = &uart1;
		zephyr,flash = &flash0;
		cros,rtc = &mtc;
	};

	ec-console {
		compatible = "ec-console";

		disabled = "hostcmd";
	};

	named-batteries {
		compatible = "named-batteries";

		lgc011 {
			enum-name = "lgc011";
		};
	};

	named-i2c-ports {
		compatible = "named-i2c-ports";

		i2c_sensor: sensor {
			i2c-port = <&i2c0_0>;
			enum-name = "I2C_PORT_SENSOR";
		};
		i2c-accel {
			i2c-port = <&i2c0_0>;
			enum-name = "I2C_PORT_ACCEL";
		};
		i2c_usb_c0: usb-c0 {
			i2c-port = <&i2c1_0>;
			enum-name = "I2C_PORT_USB_C0";
		};
		i2c_usb_c1: usb-c1 {
			i2c-port = <&i2c2_0>;
			enum-name = "I2C_PORT_USB_C1";
		};
		usb1-mix {
			i2c-port = <&i2c3_0>;
			enum-name = "I2C_PORT_USB_1_MIX";
		};
		power {
			i2c-port = <&i2c5_0>;
			enum-name = "I2C_PORT_POWER";
		};
		battery {
			i2c-port = <&i2c5_0>;
			enum-name = "I2C_PORT_BATTERY";
		};
		eeprom {
			i2c-port = <&i2c7_0>;
			remote-port = <7>;
			enum-name = "I2C_PORT_EEPROM";
		};
		charger {
			i2c-port = <&i2c7_0>;
			enum-name = "I2C_PORT_CHARGER";
		};
	};

	named-adc-channels {
		compatible = "named-adc-channels";

		adc_charger: charger {
			label = "TEMP_CHARGER";
			enum-name = "ADC_TEMP_SENSOR_CHARGER";
			channel = <0>;
		};
		adc_pp3300_regulator: pp3300_regulator {
			label = "TEMP_PP3300_REGULATOR";
			enum-name = "ADC_TEMP_SENSOR_PP3300_REGULATOR";
			channel = <1>;
		};
		adc_ddr_soc: ddr_soc {
			label = "TEMP_DDR_SOC";
			enum-name = "ADC_TEMP_SENSOR_DDR_SOC";
			channel = <8>;
		};
		adc_fan: fan {
			label = "TEMP_FAN";
			enum-name = "ADC_TEMP_SENSOR_FAN";
			channel = <3>;
		};
	};

	named-temp-sensors {
		charger {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_30K9_47K_4050B>;
			label = "TEMP_SENSOR_CHARGER";
			enum-name = "TEMP_SENSOR_CHARGER";
			temp_fan_off = <40>;
			temp_fan_max = <55>;
			temp_host_high = <75>;
			temp_host_halt = <80>;
			temp_host_release_high = <65>;
			adc = <&adc_charger>;
		};
		pp3300_regulator {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_30K9_47K_4050B>;
			label = "TEMP_SENSOR_PP3300_REGULATOR";
			enum-name = "TEMP_SENSOR_PP3300_REGULATOR";
			temp_fan_off = <40>;
			temp_fan_max = <55>;
			temp_host_high = <75>;
			temp_host_halt = <80>;
			temp_host_release_high = <65>;
			adc = <&adc_pp3300_regulator>;
		};
		ddr_soc {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_30K9_47K_4050B>;
			label = "TEMP_SENSOR_DDR_SOC";
			enum-name = "TEMP_SENSOR_DDR_SOC";
			temp_fan_off = <35>;
			temp_fan_max = <50>;
			temp_host_high = <70>;
			temp_host_halt = <80>;
			temp_host_release_high = <65>;
			adc = <&adc_ddr_soc>;
		};
		fan {
			compatible = "cros-ec,temp-sensor-thermistor";
			thermistor = <&thermistor_3V3_30K9_47K_4050B>;
			label = "TEMP_SENSOR_FAN";
			enum-name = "TEMP_SENSOR_FAN";
			temp_fan_off = <35>;
			temp_fan_max = <50>;
			temp_host_high = <70>;
			temp_host_halt = <80>;
			temp_host_release_high = <65>;
			adc = <&adc_fan>;
		};
	};

	vsby-psl-in-list {
		/* Use PSL_IN1/2/3/4 as detection pins from hibernate mode */
		psl-in-pads = <&psl_in1 &psl_in2 &psl_in3 &psl_in4>;
	};

	/*
	 * The CBI Second Source Factory Cache (SSFC) layout definition.
	 * Specific fields values are defined per board.
	 */
	cbi-ssfc {
		compatible = "named-cbi-ssfc";

		cbi_ssfc_base_sensor: base_sensor {
			enum-name = "BASE_SENSOR";
			size = <3>;
		};
		cbi_ssfc_lid_sensor: lid_sensor {
			enum-name = "LID_SENSOR";
			size = <3>;
		};
		cbi_ssfc_lightbar: lightbar {
			enum-name = "LIGHTBAR";
			size = <2>;
		};
	};
};

&uart1 {
	status = "okay";
	current-speed = <115200>;
	pinctrl-0 = <&altc_uart1_sl2>; /* Use UART1_SL2 ie. PIN64.65 */
};

&i2c0_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;
};

&i2c_ctrl0 {
	status = "okay";
};

&i2c1_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;
};

&i2c_ctrl1 {
	status = "okay";
};

&i2c2_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;
};

&i2c_ctrl2 {
	status = "okay";
};

&i2c3_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&i2c_ctrl3 {
	status = "okay";
};

&i2c5_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

&i2c_ctrl5 {
	status = "okay";
};

&i2c7_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;

	isl9241: isl9241@9 {
		compatible = "intersil,isl9241";
		reg = <0x09>;
		label = "ISL9241_CHARGER";
		switching-frequency = <SWITCHING_FREQ_724KHZ>;
	};
};

&i2c_ctrl7 {
	status = "okay";
};

&cros_kb_raw {
	status = "okay";
	/* No KSO2 (it's inverted and implemented by GPIO) */
	pinctrl-0 = <&alt7_no_ksi0_sl
		     &alt7_no_ksi1_sl
		     &alt7_no_ksi2_sl
		     &alt7_no_ksi3_sl
		     &alt7_no_ksi4_sl
		     &alt7_no_ksi5_sl
		     &alt7_no_ksi6_sl
		     &alt7_no_ksi7_sl
		     &alt8_no_kso00_sl
		     &alt8_no_kso01_sl
		     &alt8_no_kso03_sl
		     &alt8_no_kso04_sl
		     &alt8_no_kso05_sl
		     &alt8_no_kso06_sl
		     &alt8_no_kso07_sl
		     &alt9_no_kso08_sl
		     &alt9_no_kso09_sl
		     &alt9_no_kso10_sl
		     &alt9_no_kso11_sl
		     &alt9_no_kso12_sl
		     &alt9_no_kso13_sl
		     &alt9_no_kso14_sl
		     >;
};

&adc0 {
	status = "okay";
};

/* Power switch logic input pads */
&psl_in1 {
	flag = <NPCX_PSL_RISING_EDGE>;
};

&psl_in2 {
	flag = <NPCX_PSL_RISING_EDGE>;
};

&psl_in3 {
	flag = <NPCX_PSL_FALLING_EDGE>;
};

&psl_in4 {
	flag = <NPCX_PSL_RISING_EDGE>;
};

&thermistor_3V3_30K9_47K_4050B {
	status = "okay";
};
