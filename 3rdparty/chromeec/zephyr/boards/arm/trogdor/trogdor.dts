/* Copyright 2021 The Chromium OS Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/dts-v1/;

#include <cros/nuvoton/npcx7.dtsi>
#include <dt-bindings/adc/adc.h>
#include <dt-bindings/gpio_defines.h>
#include <dt-bindings/wake_mask_event_defines.h>
#include <nuvoton/npcx7m7fc.dtsi>

/ {
	model = "Google Trogdor Baseboard";

	aliases {
		i2c-0 = &i2c0_0;
		i2c-1 = &i2c1_0;
		i2c-2 = &i2c2_0;
		i2c-3 = &i2c3_0;
		i2c-5 = &i2c5_0;
		i2c-7 = &i2c7_0;
	};

	chosen {
		zephyr,sram = &sram0;
		zephyr,console = &uart1;
		zephyr,shell-uart = &uart1;
		zephyr,flash = &flash0;
		cros,rtc = &mtc;
	};

	ec-console {
		compatible = "ec-console";

		disabled = "hostcmd";
	};

	ec-mkbp-host-event-wakeup-mask {
		compatible = "ec-wake-mask-event";
		wakeup-mask = <(
			HOST_EVENT_MASK(HOST_EVENT_LID_OPEN) |
			HOST_EVENT_MASK(HOST_EVENT_POWER_BUTTON) |
			HOST_EVENT_MASK(HOST_EVENT_AC_CONNECTED) |
			HOST_EVENT_MASK(HOST_EVENT_AC_DISCONNECTED) |
			HOST_EVENT_MASK(HOST_EVENT_HANG_DETECT) |
			HOST_EVENT_MASK(HOST_EVENT_RTC) |
			HOST_EVENT_MASK(HOST_EVENT_MODE_CHANGE) |
			HOST_EVENT_MASK(HOST_EVENT_DEVICE))>;
	};

	ec-mkbp-event-wakeup-mask {
		compatible = "ec-wake-mask-event";
		wakeup-mask = <(MKBP_EVENT_KEY_MATRIX |
				MKBP_EVENT_HOST_EVENT |
				MKBP_EVENT_SENSOR_FIFO)>;
	};

	named-i2c-ports {
		compatible = "named-i2c-ports";

		power {
			i2c-port = <&i2c0_0>;
			enum-name = "I2C_PORT_POWER";
		};
		battery {
			i2c-port = <&i2c0_0>;
			remote-port = <0>;
			enum-name = "I2C_PORT_BATTERY";
		};
		virtual-battery {
			i2c-port = <&i2c0_0>;
			enum-name = "I2C_PORT_VIRTUAL_BATTERY";
		};
		charger {
			i2c-port = <&i2c0_0>;
			enum-name = "I2C_PORT_CHARGER";
		};
		tcpc0 {
			i2c-port = <&i2c1_0>;
			enum-name = "I2C_PORT_TCPC0";
		};
		tcpc1 {
			i2c-port = <&i2c2_0>;
			enum-name = "I2C_PORT_TCPC1";
		};
		eeprom {
			i2c-port = <&i2c5_0>;
			enum-name = "I2C_PORT_EEPROM";
		};
		i2c_sensor: sensor {
			i2c-port = <&i2c7_0>;
			enum-name = "I2C_PORT_SENSOR";
		};
		accel {
			i2c-port = <&i2c7_0>;
			enum-name = "I2C_PORT_ACCEL";
		};
	};

	named-pwms {
		compatible = "named-pwms";

		kblight: kb_bl_pwm {
			pwms = <&pwm3 0 0>;
			frequency = <10000>;
		};
		displight: edp_bkltctl {
			pwms = <&pwm5 0 0>;
			frequency = <4800>;
		};
	};

	named-adc-channels {
		compatible = "named-adc-channels";

		vbus {
			label = "VBUS";
			enum-name = "ADC_VBUS";
			channel = <1>;
			/* Measure VBUS through a 1/10 voltage divider */
			mul = <10>;
		};
		amon_bmon {
			label = "AMON_BMON";
			enum-name = "ADC_AMON_BMON";
			channel = <2>;
			/*
			 * Adapter current output or battery charging/
			 * discharging current (uV) 18x amplification on
			 * charger side.
			 */
			mul = <1000>;
			div = <18>;
		};
		psys {
			label = "PSYS";
			enum-name = "ADC_PSYS";
			channel = <3>;
			/*
			 * ISL9238 PSYS output is 1.44 uA/W over 5.6K resistor,
			 * to read 0.8V @ 99 W, i.e. 124000 uW/mV.
			 */
			mul = <124000>;
		};
	};

	def-lvol-io-list {
		compatible = "nuvoton,npcx-lvolctrl-def";

		/* I2C_SDA0 & SCL0 */
		lvol-io-pads = <&lvol_iob4 &lvol_iob5>;
	};
};

&uart1 {
	status = "okay";
	current-speed = <115200>;
	pinctrl-0 = <&altc_uart1_sl2>; /* Use UART1_SL2 ie. PIN64.65 */
};

&i2c0_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_STANDARD>;

	isl9238: isl9238@9 {
		compatible = "intersil,isl9238";
		reg = <0x09>;
		label = "ISL9238_CHARGER";
	};
};

&i2c_ctrl0 {
	status = "okay";
};

&i2c1_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;
};

&i2c_ctrl1 {
	status = "okay";
};

&i2c2_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;
};

&i2c_ctrl2 {
	status = "okay";
};

&i2c3_0 {
	/* Not used as no WLC connected */
	clock-frequency = <I2C_BITRATE_FAST>;
};

&i2c_ctrl3 {
	status = "okay";
};

&i2c5_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;
};

&i2c_ctrl5 {
	status = "okay";
};

&i2c7_0 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;
};

&i2c_ctrl7 {
	status = "okay";
};

/* Keyboard backlight */
&pwm3 {
	status = "okay";
};

/* Display backlight */
&pwm5 {
	status = "okay";
};

&adc0 {
	status = "okay";
};

&cros_kb_raw {
	status = "okay";
	/* No KSO2 (it's inverted and implemented by GPIO) */
	pinctrl-0 = <&alt7_no_ksi0_sl
		     &alt7_no_ksi1_sl
		     &alt7_no_ksi2_sl
		     &alt7_no_ksi3_sl
		     &alt7_no_ksi4_sl
		     &alt7_no_ksi5_sl
		     &alt7_no_ksi6_sl
		     &alt7_no_ksi7_sl
		     &alt8_no_kso00_sl
		     &alt8_no_kso01_sl
		     &alt8_no_kso03_sl
		     &alt8_no_kso04_sl
		     &alt8_no_kso05_sl
		     &alt8_no_kso06_sl
		     &alt8_no_kso07_sl
		     &alt9_no_kso08_sl
		     &alt9_no_kso09_sl
		     &alt9_no_kso10_sl
		     &alt9_no_kso11_sl
		     &alt9_no_kso12_sl
		     >;
};
